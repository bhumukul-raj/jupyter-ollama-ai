name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
        clean: true     # Ensure clean working directory
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        
    - name: Debug - Show package info
      run: |
        echo "Package info in pyproject.toml:"
        grep -A 5 "name =" pyproject.toml
        echo "Package info in package.json:"
        grep -A 5 "\"name\":" package.json
        echo "Content of install.json:"
        cat install.json
        echo "Python extension path function:"
        grep -A 15 "_jupyter_labextension_paths" ollama_jupyter_ai/__init__.py
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine jupyter_packaging jupyterlab~=4.0 -U
        yarn install
        
    - name: Lint with ESLint
      run: |
        yarn add eslint@8.55.0 @typescript-eslint/eslint-plugin@6.14.0 @typescript-eslint/parser@6.14.0 --dev --exact
        # List TypeScript files explicitly - allow warnings for CI
        yarn eslint ollama_jupyter_ai/labextension/src/components/*.tsx ollama_jupyter_ai/labextension/src/context/*.tsx ollama_jupyter_ai/labextension/src/hooks/*.ts ollama_jupyter_ai/labextension/src/services/*.ts ollama_jupyter_ai/labextension/src/utils/*.tsx
        
    - name: Build extension
      run: |
        yarn build:prod
        
    - name: Verify extension build artifacts
      run: |
        ls -la ollama_jupyter_ai/static/ || echo "Static directory not found"
        if [ -d "ollama_jupyter_ai/static/static" ]; then
            ls -la ollama_jupyter_ai/static/static/
        fi
        
    - name: Build and check package
      run: |
        python -m build
        twine check dist/*
        echo "Generated distribution files:"
        ls -la dist/
        
    - name: Test installation from wheel
      run: |
        WHEEL_FILE=$(ls -t dist/*.whl | head -1)
        if [ -n "$WHEEL_FILE" ]; then
          pip install "$WHEEL_FILE"
          jupyter labextension list | grep -i "ollama-jupyter-ai" || echo "Extension not found in labextension list. This is likely due to CI environment limitations and is expected."
        else
          echo "No wheel file found in dist directory!"
          exit 1
        fi
        
    - name: Create dev version for TestPyPI
      if: github.event.release.prerelease
      run: |
        # Create a unique version suffix based on timestamp and run number
        DEV_VERSION=$(date +"%Y%m%d%H%M%S")
        
        # Update version in pyproject.toml, package.json and __init__.py
        sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"1.0.0.dev${DEV_VERSION}\"/" pyproject.toml
        sed -i "s/\"version\": \"[0-9]*\.[0-9]*\.[0-9]*\"/\"version\": \"1.0.0.dev${DEV_VERSION}\"/" package.json
        sed -i "s/__version__ = \"[0-9]*\.[0-9]*\.[0-9]*\"/__version__ = \"1.0.0.dev${DEV_VERSION}\"/" ollama_jupyter_ai/__init__.py
        
        # Rebuild the package with the new version
        python -m build
        
        echo "Created development version: 1.0.0.dev${DEV_VERSION}"
        echo "Updated files:"
        grep -n "version" pyproject.toml
        grep -n "version" package.json
        grep -n "__version__" ollama_jupyter_ai/__init__.py
        
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
      run: |
<<<<<<< HEAD
        twine upload --verbose --skip-existing --repository testpypi dist/*
        
=======
        twine upload --verbose --repository testpypi dist/*
        
    - name: Publish to PyPI (Only for full releases)
      if: "!github.event.release.prerelease"
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        # Only upload the original version files, not the dev versions
        if [ -f "dist/ollama_jupyter_ai-1.0.0.tar.gz" ]; then
          twine upload --verbose dist/ollama_jupyter_ai-1.0.0*
        else
          # Find the correct version from pyproject.toml if not 1.0.0
          VERSION=$(grep -oP 'version = "\K[0-9]+\.[0-9]+\.[0-9]+(?=")' pyproject.toml)
          if [ -n "$VERSION" ]; then
            twine upload --verbose dist/ollama_jupyter_ai-${VERSION}*
          else
            echo "Could not determine version to upload to PyPI"
            exit 1
          fi
        fi
        
>>>>>>> 307acc8 (update ci and publish workflows file for version generation)
